<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zw.design.modules.build.distributedesigntask.mapper.DeptTaskDao">

  <select id="findTasks" resultType="com.zw.design.modules.build.distributedesigntask.model.TaskDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.ProjectQuery">
    select * from (
    select
    ROW_NUMBER() OVER(Order by t.order_no desc, t.code, t.deptType) as rowId,* from (
    select
    b.id,
    b.projectNo,
    b.order_no,
    b.code,
    b.code_special as codeSpecial,
    b.name,
    b.demander,
    b.address,
    b.num,
    b.plan_time as planTime,
    b.comment,
    b.status as projectStatus,
    b.create_time as createTime,
    b.delivery_date as deliveryDate,
    a.department_type as deptType,
    a.department_num as deptNum,
    a.status as deptStatus,
    a.annotates as annotates,
    c.produce_name as sendName,
    c.status as sendStatus,
    c.annotate as sendAnnotate,
    d.produce_name as signName,
    d.status as signStatus,
    d.annotate as signAnnotate,
    j.status as produceStatus,  /*工艺状态*/
    j.annotates as produceAnnotate,
    k.status as installStatus,  /*生产状态*/
    k.annotates as installAnnotate,
    g.produce_name as debugName,
    g.status as debugStatus,
    g.annotate as debugAnnotate,
    h.produce_name as acceptName,
    h.status as acceptStatus,
    h.annotate as acceptAnnotate,
    i.produce_name as saveName,
    i.status as saveStatus,
    i.annotate as saveAnnotate,
    l.produce_name as contractName,
    l.status as contractStatus,
    l.annotate as contractAnnotate,
    l.contract_no as contractNo,
    m.message
    from 	(
    select dept_a.department_type,dept_a.project_id,min(department_num) as department_num,sum ( status ) AS status,
    stuff((select ',' + dept_c.annotate from dept_task dept_c where dept_c.department_type = dept_a.department_type and dept_c.project_id = dept_a.project_id for xml path('')),1,1,'') as annotates
    from dept_Task dept_a
    <![CDATA[ where dept_a.status < 100  ]]>
    group by dept_a.department_type,dept_a.project_id
    ) as a
    left join (
    select pro_a.project_id, sum(pro_a.status) as status,
    stuff((select ',' + pro_c.annotate from produce_task pro_c where pro_c.produce_num in (4,5,6) and pro_c.project_id = pro_a.project_id for xml path('')),1,1,'') as annotates
    from produce_task pro_a where pro_a.produce_num in(4,5,6)
    group by pro_a.project_id
    ) as j on j.project_id = a.project_id
    left join (
    select pro_b.project_id, sum(pro_b.status) as status,
    stuff((select ',' + pro_d.annotate from produce_task pro_d where pro_d.produce_num in(7,8,9) and pro_d.project_id = pro_b.project_id for xml path('')),1,1,'') as annotates
    from produce_task pro_b where pro_b.produce_num in(7,8,9,10)
    group by pro_b.project_id
    ) as k on k.project_id = a.project_id
    inner JOIN (
    select ROW_NUMBER() OVER(Order by order_no desc, code) as projectNo,* from project
    where 1 = 1
    <if test="code != null and code != ''">
      AND code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND name like #{name}
    </if>
    <if test="demander != null and demander != ''">
      AND demander like #{demander}
    </if>
    <if test="year != null">
      AND year (create_time) = #{year}
    </if>
    <if test="statusQuery == 1">
      AND status = 2
    </if>
    <if test="statusQuery == 2">
      AND status = 4
    </if>
    <if test="startTime != null">
      <![CDATA[ AND create_time >= #{startTime} ]]>
    </if>
    <if test="endTime != null">
      <![CDATA[ AND create_time <= #{endTime} ]]>
    </if>
    ) b on a.project_id = b.id
    LEFT JOIN produce_task c on c.project_id = b.id
    LEFT JOIN produce_task d on d.project_id = b.id
    LEFT JOIN produce_task g on g.project_id = b.id
    LEFT JOIN produce_task h on h.project_id = b.id
    LEFT JOIN produce_task i on i.project_id = b.id
    LEFT JOIN produce_task l on l.project_id = b.id
    left join (
    select count(id) as message ,project_id from message group by project_id
    ) m on m.project_id = b.id
    WHERE c.produce_num = 1 and d.produce_num = 2 and g.produce_num = 11 and
    h.produce_num = 12 and i.produce_num = 13 and l.produce_num = 3
    <if test="code != null and code != ''">
      AND b.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND b.name like #{name}
    </if>
    <if test="demander != null and demander != ''">
      AND b.demander like #{demander}
    </if>
    <if test="year != null">
      AND year (b.create_time) = #{year}
    </if>
    <if test="type != null">
      AND a.department_type = #{type}
    </if>
    <if test="num != null">
      AND a.department_num = #{num}
    </if>
    <if test="statusQuery == 1">
      AND b.status = 2
    </if>
    <if test="statusQuery == 2">
      AND b.status = 4
    </if>
    <if test="startTime != null">
      <![CDATA[ AND b.create_time >= #{startTime} ]]>
    </if>
    <if test="endTime != null">
      <![CDATA[ AND b.create_time <= #{endTime} ]]>
    </if>
    ) as t ) p
    where p.rowId BETWEEN #{start} and #{length}
	</select>
  <select id="findTasksCount" resultType="java.lang.Integer" parameterType="com.zw.design.modules.build.distributedesigntask.query.ProjectQuery">
    select count(b.id) from (
    select department_type,project_id,min(department_num) as department_num,sum ( status ) AS status
    from dept_Task
    <![CDATA[ where status < 100  ]]>
    group by department_type,project_id
    ) as a
    inner JOIN project b on a.project_id = b.id
    where 1 = 1
    <if test="code != null and code != ''">
      AND b.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND b.name like #{name}
    </if>
    <if test="demander != null and demander != ''">
      AND b.demander like #{demander}
    </if>
    <if test="year != null">
      AND year (b.create_time) = #{year}
    </if>
    <if test="type != null">
      AND a.department_type = #{type}
    </if>
    <if test="num != null">
      AND a.department_num = #{num}
    </if>
    <if test="statusQuery == 1">
      AND b.status = 2
    </if>
    <if test="statusQuery == 2">
      AND b.status = 4
    </if>
    <if test="startTime != null">
      <![CDATA[ AND b.create_time >= #{startTime} ]]>
    </if>
    <if test="endTime != null">
      <![CDATA[ AND b.create_time <= #{endTime} ]]>
    </if>

  </select>

  <select id="findTasksByProjectId" resultType="com.zw.design.entity.dbo.DeptTask" >
    select * from dept_task where project_id = #{id}
    order by isnull(start_time,'2300-1-1') , id
  </select>

  <select id="findMaxStepNumByProjectId" resultType="java.lang.Integer">
    select max(step_num) from dept_task where project_id = #{id}
  </select>

  <select id="findIdsByDept" resultType="java.lang.Integer" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select DISTINCT project_id from dept_task GROUP BY project_id, department_type, department_num HAVING 1=1
    <if test="type != null and num != null">
      and department_type = #{type} and department_num = #{num}
    </if>
    <if test="status == 1">
      <![CDATA[ and sum(status) < 8 ]]>
    </if>
    <if test="status == 2">
      and sum(status) = 8
    </if>
    <if test="status == 3">
      <![CDATA[ and sum(status) > 8 ]]>
    </if>
    order by project_id

  </select>

  <select id="findDeptTaskList" resultType="com.zw.design.modules.build.distributedesigntask.model.DeptTaskDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select * from
    (
    select ROW_NUMBER() OVER(Order by d.orderNo desc, d.code, d.type) as rowId, * from
    (
    select t.projectNo,a.id,a.order_no as orderNo,a.demander,a.address,a.code_special as codeSpecial,e.status as signStatus,f.status as debugStatus, a.name,a.code,a.num,a.plan_time as planTime, a.comment,a.status as projectStatus, b.type,b.num as deptNum, b.a as firstStep, b.b as secondStep, b.c as thirdStep, b.d as fourthStep ,c.sumStatus as sumStatus
    from project a
    left JOIN
    (	select department_type type,min(department_num) num,project_id,
      sum(CASE step_no WHEN 1 then status end) as a,
      sum(CASE step_no WHEN 2 then status end) as b,
      sum(CASE step_no WHEN 3 then status end) as c,
      sum(CASE step_no WHEN 4 then status end) as d
      from dept_task GROUP BY department_type, project_id) b
    on b.project_id = a.id
    inner join
    (select a.project_id , a.department_type as type, a.department_num as deptNum, sum(a.status) as sumStatus from dept_task a
    group by a.project_id,a.department_type,a.department_num) c
    on c.project_id = a.id and c.type = b.type and c.deptNum = b.num
    left join
    (select ROW_NUMBER() OVER(Order by order_no desc, code) as projectNo, id from project where 1 = 1
    <if test="code != null and code != ''">
      AND code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND name like #{name}
    </if>
    <if test="ids != null and ids != '' ">
      and id in (${ids})
    </if>
    <if test="status == 1">
      and status = 2
    </if>
    <if test="status == 2">
      and status = 4
    </if>
    ) t
    on a.id = t.id
    LEFT JOIN produce_task e on e.project_id = a.id
    LEFT JOIN produce_task f on f.project_id = a.id
    where e.produce_num = 2 and f.produce_num = 11
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    <if test="ids != null and ids != '' ">
      and a.id in (${ids})
    </if>
    <if test="status == 1">
      and a.status = 2
    </if>
    <if test="status == 2">
      and a.status = 4
    </if>
    ) d
    ) x
    where x.rowid BETWEEN #{start} and #{length}
  </select>
  <select id="findDeptTaskCount" resultType="java.lang.Integer" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(a.id)
    from project a
    left JOIN
    (	select department_type type,min(department_num) num,project_id,
    sum(CASE step_no WHEN 1 then status end) as a,
    sum(CASE step_no WHEN 2 then status end) as b,
    sum(CASE step_no WHEN 3 then status end) as c,
    sum(CASE step_no WHEN 4 then status end) as d
    from dept_task GROUP BY department_type, project_id) b
    on b.project_id = a.id
    inner join
    (select a.project_id , a.department_type as type, a.department_num as deptNum, sum(a.status) as sumStatus from dept_task a
    group by a.project_id,a.department_type,a.department_num) c
    on c.project_id = a.id and c.type = b.type and c.deptNum = b.num
    where 1 = 1
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    <if test="ids != null and ids != '' ">
      and a.id in (${ids})
    </if>
    <if test="status == 1">
      and a.status = 2
    </if>
    <if test="status == 2">
      and a.status = 4
    </if>
  </select>

  <select id="findProjectCount" resultType="com.zw.design.modules.build.distributedesigntask.model.CollectDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(c.id) as projectNum, sum(c.num) as productNum from
    (
    select a.id, a.num from project as a
    INNER JOIN ( select project_id from dept_task GROUP BY project_id, department_type, department_num
    HAVING 1 = 1
    <if test="type != null and num != null">
      and department_type = #{type} and department_num = #{num}
    </if>
    ) as b
    on a.id = b.project_id
    where 1 = 1
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    ) c
  </select>
  <select id="findProjectDelCompCount" resultType="com.zw.design.modules.build.distributedesigntask.model.CollectDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(c.id) as projectNum, sum(c.num) as productNum from
    (
    select a.id, a.num from project as a
    INNER JOIN ( select project_id from dept_task GROUP BY project_id, department_type, department_num
    HAVING 1 = 1
    and sum(status) = 8
    <if test="type != null and num != null">
      and department_type = #{type} and department_num = #{num}
    </if>
    ) as b
    on a.id = b.project_id
    where 1 = 1
    <![CDATA[ and a.status = 0  ]]>
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    ) c
  </select>
  <select id="findProjectDelUnCompCount" resultType="com.zw.design.modules.build.distributedesigntask.model.CollectDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(c.id) as projectNum, sum(c.num) as productNum from
    (
    select a.id, a.num from project as a
    INNER JOIN ( select project_id from dept_task GROUP BY project_id, department_type, department_num
    HAVING 1 = 1
    <![CDATA[ and sum(status) < 8  ]]>
    <if test="type != null and num != null">
      and department_type = #{type} and department_num = #{num}
    </if>
    ) as b
    on a.id = b.project_id
    where 1 = 1
    <![CDATA[ and a.status = 0  ]]>
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    ) c
  </select>
  <select id="findDeptUndoneCount" resultType="com.zw.design.modules.build.distributedesigntask.model.CollectDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(c.id) as projectNum, sum(c.num) as productNum from
    (
    select a.id, a.num from project as a
    INNER JOIN ( select project_id from dept_task GROUP BY project_id, department_type, department_num
    HAVING 1 = 1
    <![CDATA[ and sum(status) < 8  ]]>
    <if test="type != null and num != null">
      and department_type = #{type} and department_num = #{num}
    </if>
     ) as b
    on a.id = b.project_id
    where 1 = 1
    <![CDATA[ and a.status > 0  ]]>
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    ) c
  </select>
  <select id="findDeptdoneCount" resultType="com.zw.design.modules.build.distributedesigntask.model.CollectDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(c.id) as projectNum, sum(c.num) as productNum from
    (
    select a.id, a.num from project as a
    INNER JOIN ( select project_id from dept_task GROUP BY project_id, department_type, department_num
    HAVING 1 = 1
    and sum(status) = 8
    <if test="type != null and num != null">
      and department_type = #{type} and department_num = #{num}
    </if>
    ) as b
    on a.id = b.project_id
    where 1 = 1
    <![CDATA[ and a.status > 0  ]]>
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    ) c
  </select>

  <select id="findProcessList" resultType="com.zw.design.modules.build.distributedesigntask.model.DeptTaskDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select * from
    (
      select ROW_NUMBER() OVER(Order by d.orderNo desc, d.code) as projectNo, * from
      (
        select
        a.id,
        a.name,
        a.code,
        a.num,
        a.plan_time as planTime,
        a.comment,
        a.status as projectStatus,
        a.demander,
        a.address,
        a.code_special as codeSpecial,
        a.order_no as orderNo,
        b.status as firstStep,
        c.status as secondStep,
        d.status as thirdStep/*,
        e.status as deptStatus,
        f.status as produceStatus*/
        from project a
        left JOIN produce_task b on b.project_id = a.id
        left join produce_task c on c.project_id = a.id
        left join produce_task d on d.project_id = a.id
        /*LEFT JOIN (
          select round(avg(CONVERT(float,status)),2) as status , project_id from dept_task
          <![CDATA[ where status <=2   ]]>
          group by project_id
        ) e on e.project_id = a.id
        LEFT JOIN (
          select round(avg(CONVERT(float,status)),2) as status , project_id from produce_task where produce_num in (7,8,9) group by project_id
        ) f on f.project_id = a.id*/
        where b.produce_num = 4 and c.produce_num = 5 and d.produce_num = 6
        <if test="code != null and code != ''">
          AND a.code like #{code}
        </if>
        <if test="name != null and name != ''">
          AND a.name like #{name}
        </if>
        <if test="year != null">
          AND year (a.create_time) = #{year}
        </if>
        <if test="firstStatus == 1">
          AND (b.status != 2 or c.status != 2 or d.status != 2) and a.status = 2
        </if>
        <if test="firstStatus == 2">
          AND b.status = 2 and c.status = 2 and d.status = 2 and a.status  = 4
        </if>
      ) d
    ) x where x.projectNo BETWEEN #{start} and #{length}
  </select>
  <select id="findProcessCount" resultType="java.lang.Integer" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(a.id)
    from project a
    left JOIN produce_task b on b.project_id = a.id
    left join produce_task c on c.project_id = a.id
    left join produce_task d on d.project_id = a.id
    where 1 = 1 and b.produce_num = 4 and c.produce_num = 5 and d.produce_num = 6
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    <if test="year != null">
      AND year (a.create_time) = #{year}
    </if>
    <if test="firstStatus == 1">
      AND (b.status != 2 or c.status != 2 or d.status != 2) and a.status = 2
    </if>
    <if test="firstStatus == 2">
      AND b.status = 2 and c.status = 2 and d.status = 2 and a.status = 4
    </if>
  </select>

  <select id="findProduceList" resultType="com.zw.design.modules.build.distributedesigntask.model.DeptTaskDto" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select * from
    (
      select ROW_NUMBER() OVER(Order by d.orderNo desc, d.code) as projectNo, * from
      (
        select
        a.id,
        a.name,
        a.code,
        a.num,
        a.plan_time as planTime,
        a.comment,
        a.status as projectStatus,
        a.demander,
        a.address,
        a.code_special as codeSpecial,
        a.order_no as orderNo,
        b.status as firstStep,
        c.status as secondStep,
        d.status as thirdStep,
        e.status as fourthStep
        /*e.status as deptStatus,
        f.status as processStatus*/
        from project a
        left JOIN produce_task b on b.project_id = a.id
        left join produce_task c on c.project_id = a.id
        left join produce_task d on d.project_id = a.id
        left join produce_task e on e.project_id = a.id

        /*LEFT JOIN (
          select round(avg(CONVERT(float,status)),2) as status , project_id from dept_task
          <![CDATA[ where status <=2   ]]>
          group by project_id
        ) e on e.project_id = a.id
        LEFT JOIN (
          select round(avg(CONVERT(float,status)),2) as status , project_id from produce_task where produce_num in (4,5,6) group by project_id
        ) f on f.project_id = a.id*/
        where b.produce_num = 7 and c.produce_num = 8 and e.produce_num = 9 and d.produce_num = 10
        <if test="code != null and code != ''">
          AND a.code like #{code}
        </if>
        <if test="name != null and name != ''">
          AND a.name like #{name}
        </if>
        <if test="year != null">
          AND year (a.create_time) = #{year}
        </if>
        <if test="firstStatus == 1">
          AND (b.status != 2 or c.status != 2 or d.status != 2 or e.status != 2) and a.status = 2
        </if>
        <if test="firstStatus == 2">
          AND b.status = 2 and c.status = 2 and d.status = 2 and e.status = 2 and a.status = 4
        </if>
      ) d
    ) x where x.projectNo BETWEEN #{start} and #{length}
  </select>
  <select id="findProduceCount" resultType="java.lang.Integer" parameterType="com.zw.design.modules.build.distributedesigntask.query.TaskQuery">
    select count(a.id)
    from project a
    left JOIN produce_task b on b.project_id = a.id
    left join produce_task c on c.project_id = a.id
    left join produce_task d on d.project_id = a.id
    left join produce_task e on e.project_id = a.id
    where 1 = 1 and b.produce_num = 4 and c.produce_num = 5 and e.produce_num = 9 and d.produce_num = 10
    <if test="code != null and code != ''">
      AND a.code like #{code}
    </if>
    <if test="name != null and name != ''">
      AND a.name like #{name}
    </if>
    <if test="year != null">
      AND year (a.create_time) = #{year}
    </if>
    <if test="firstStatus == 1">
      AND (b.status != 2 or c.status != 2 or d.status != 2 or e.status != 2) and a.status = 2
    </if>
    <if test="firstStatus == 2">
      AND b.status = 2 and c.status = 2 and d.status = 2 and e.status = 2 and a.status = 4
    </if>
  </select>

  <select id="findProduceCompleteStatus" resultType="java.lang.Float">
    select round(avg(CONVERT(float,status)),2) as produceStatus from produce_task where project_id = #{id} group by project_id
  </select>

  <select id="findDeptCompleteStatus" resultType="java.lang.Float">
    select round(avg(CONVERT(float,status)),2) as status from dept_task
          <![CDATA[ where status <=2   ]]>
          and project_id = #{id}
          group by project_id
  </select>

  <update id="updateProcess1">
    update produce_task set produce_num = 13 where produce_num = 12
  </update>
  <update id="updateProcess2">
    update produce_task set produce_num = 12 where produce_num = 11
  </update>
  <update id="updateProcess3">
    update produce_task set produce_num = 11 where produce_num = 10
  </update>
  <update id="updateProcess4">
    update produce_task set produce_num = 10 where produce_num = 9
  </update>
  <update id="updateProcess5">
    update produce_task set produce_num = 4, produce_name = '原材料外协计划' where produce_num = 3
  </update>

</mapper>